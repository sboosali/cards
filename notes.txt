https://github.com/reflex-frp/reflex-platform/blob/develop/docs/project-development.md

========================================
# Installing

$ nix-build && tree result
...
result
├── ghc
│   ├── backend -> /nix/store/bgraikacjv68lfcghkprj3mspwx9f2bn-backend-0.1.0.0
│   ├── common -> /nix/store/lcgz36j77y6w7jyd39b14zp00hfaxn3s-common-0.1.0.0
│   └── frontend -> /nix/store/fnq7vs2fnkj0hr6l0cv9pna9f0br2lln-frontend-0.1.0.0
└── ghcjs
    ├── common -> /nix/store/fgbmn6mjgh7gfdbgnb7a21fsb9175gmv-common-0.1.0.0
    └── frontend -> /nix/store/khfpsla56pvqv174yzzc2y65g78bfflc-frontend-0.1.0.0

$ nix-build -o backend-result  -A ghc.cards-backend
$ nix-build -o frontend-result -A ghcjs.cards-frontend

========================================
# Build All Three Packages In A Shared Incremental Environment

to build with GHC:

    $ nix-shell -A shells.ghc
    [nix-shell]$ cabal new-build all

               # (`cabal` is supplied by the sandbox)

to build with GHCJS:

    $ nix-shell -A shells.ghcjs
    [nix-shell]$ cabal --project-file=cabal-ghcjs.project --builddir=dist-ghcjs new-build all

========================================
# Building Frontends With GHC

GHCJS can be quite slow, especially if you are using Template Haskell. Building the frontend with GHC can drastically speed up build times, and enables you to test from GHCi for even faster reloads.

========================================
# Building Mobile Apps

$ # On Linux
$ nix-build -o android-result -A android.frontend

$ # On macOS
$ nix-build -o ios-result -A ios.frontend

$ tree android-result
android-result
├── android-app-debug.apk
├── bin
│   └── deploy
└── nix-support
    └── hydra-build-products


    emulateApp
    <nixpkgs>/pkgs/development/mobile/androidenv/emulate-app.nix

    nix-env -f ~/.nix-defexpr/channels/nixpkgs/pkgs/development/mobile/androidenv -i '.*'
    error: cannot auto-call a function that has an argument without a default value (‘pkgs’)

    $ nix-env -qaP '.*android.*'
    nixpkgs.androidndk              android-ndk-r10e
    nixpkgs.androidsdk              android-sdk-25.2.5
    nixpkgs.androidsdk_extras       android-sdk-25.2.5
    nixpkgs.android-studio          android-studio-3.0.1.0
    nixpkgs.android-studio-preview  android-studio-preview-3.1.0.6
    nixpkgs.android-udev-rules      android-udev-rules-20171113
    nixpkgs.minijail                minijail-android-8.0.0_r34

    # emulateApp
    {androidenv, kitchensink}:
    androidenv.emulateApp {
      name = "emulate-${kitchensink.name}";
      app = kitchensink;
      platformVersion = "16";
      useGoogleAPIs = true;
      package = "com.appcelerator.kitchensink";
      activity = ".KitchensinkActivity";
    }


You need to install the APK on the emulator. You can do this with the adb command line tool that is included in the Android SDK.

    adb -e install -r yourapp.apk

Once you've done that you should be able to run the app.

The -e and -r flags might not be necessary. They just specify that you are using an emulator (if you also have a device connected) and that you want to replace the app if it already exists.


e.g.

    adb -e install -r android-result/android-app-debug.apk 
    # error: no emulators found

    time nix-build emulate.nix
    # building path(s) ‘/nix/store/fm8ik5krpgh5qz31vqc5pz3dciy0zhs6-android-app’
    # building path(s) ‘/nix/store/c1dckq54dnq1h6yq1gk623rh14cs62c0-emulate-example-cards-frontend’
    # /nix/store/c1dckq54dnq1h6yq1gk623rh14cs62c0-emulate-example-cards-frontend
    # real	1m6.303s

    /nix/store/c1dckq54dnq1h6yq1gk623rh14cs62c0-emulate-example-cards-frontend/bin/run-test-emulator 
    # Looking for a free TCP port in range 5554-5584
    # We have a free TCP port: 5554
    # Error: Target id is not valid. Use 'android list targets' to get the target ids.

    android list targets
    # Available Android targets:
    # ----------
    # id: 1 or "android-26"
    #      Name: Android 8.0.0
    #      Type: Platform
    #      API level: 26
    #      Revision: 2
    #      Skins: HVGA, QVGA, WQVGA400, WQVGA432, WSVGA, WVGA800 (default), WVGA854, WXGA720, WXGA800,     # WXGA800-7in
    #  Tag/ABIs : no ABIs.


    $ cat android-result/bin/deploy
    /nix/store/srgawlc7ksmvsibzimnr3rdyf84vqayw-android-sdk-25.2.5/bin/adb install -r     "/nix/store/2lmi97hzssx10w067jiza4pzzi7dh6xw-android-app/android-app-debug.apk"

no device connected

    # android-result/bin/deploy
    # error: no devices/emulators found
    # adb: error: failed to get feature set: no devices/emulators found

android device plugged in, with "USB debugging connected"

    android-result/bin/deploy
    # error: insufficient permissions for device: verify udev rules.

https://developer.android.com/studio/run/device.html

my user is already in the right group

    id -Gn 
    # sboo adm cdrom sudo dip plugdev lpadmin sambashare

dont' need

    # sudo usermod -aG plugdev $LOGNAME


========================================
Manually Install App On Android Phone

    du -h android-result/android-app-debug.apk | cut -f1
    # 4.4M

    nautilus android-result
    # popup a file browser GUI

On the phone, under the USB options drop down, select transfer files.
On my computer, a filesystem browser popped up, and I just dragged the APK into it.

Then on my phone, using an app like File Manager, I just double-clicked on the file. 
So I clicked `install`, it installed, I clicked `open`, and it worked!

These `Activity`-killing actions preserved the application state: rotating the phone between landscape and portrait modes; pressing the right button (to list all open apps); and "alt-tabbing"; pressing the home button (to leave the app, then return).  
Pressing the left button (the back button) reset the state. 

========================================
