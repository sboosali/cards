https://github.com/reflex-frp/reflex-platform/blob/develop/docs/project-development.md

========================================
# Installing

$ nix-build && tree result
...
result
├── ghc
│   ├── backend -> /nix/store/bgraikacjv68lfcghkprj3mspwx9f2bn-backend-0.1.0.0
│   ├── common -> /nix/store/lcgz36j77y6w7jyd39b14zp00hfaxn3s-common-0.1.0.0
│   └── frontend -> /nix/store/fnq7vs2fnkj0hr6l0cv9pna9f0br2lln-frontend-0.1.0.0
└── ghcjs
    ├── common -> /nix/store/fgbmn6mjgh7gfdbgnb7a21fsb9175gmv-common-0.1.0.0
    └── frontend -> /nix/store/khfpsla56pvqv174yzzc2y65g78bfflc-frontend-0.1.0.0

$ nix-build -o backend-result  -A ghc.cards-backend
$ nix-build -o frontend-result -A ghcjs.cards-frontend

========================================
# Build All Three Packages In A Shared Incremental Environment

to build with GHC:

    $ nix-shell -A shells.ghc
    [nix-shell]$ cabal new-build all

               # (`cabal` is supplied by the sandbox)

to build with GHCJS:

    $ nix-shell -A shells.ghcjs
    [nix-shell]$ cabal --project-file=cabal-ghcjs.project --builddir=dist-ghcjs new-build all

========================================
# Building Frontends With GHC

GHCJS can be quite slow, especially if you are using Template Haskell. Building the frontend with GHC can drastically speed up build times, and enables you to test from GHCi for even faster reloads.

========================================
# Building Mobile Apps

$ # On Linux
$ nix-build -o android-result -A android.frontend

$ # On macOS
$ nix-build -o ios-result -A ios.frontend

$ tree android-result
android-result
├── android-app-debug.apk
├── bin
│   └── deploy
└── nix-support
    └── hydra-build-products


    emulateApp
    <nixpkgs>/pkgs/development/mobile/androidenv/emulate-app.nix

    nix-env -f ~/.nix-defexpr/channels/nixpkgs/pkgs/development/mobile/androidenv -i '.*'
    error: cannot auto-call a function that has an argument without a default value (‘pkgs’)

    $ nix-env -qaP '.*android.*'
    nixpkgs.androidndk              android-ndk-r10e
    nixpkgs.androidsdk              android-sdk-25.2.5
    nixpkgs.androidsdk_extras       android-sdk-25.2.5
    nixpkgs.android-studio          android-studio-3.0.1.0
    nixpkgs.android-studio-preview  android-studio-preview-3.1.0.6
    nixpkgs.android-udev-rules      android-udev-rules-20171113
    nixpkgs.minijail                minijail-android-8.0.0_r34

    # emulateApp
    {androidenv, kitchensink}:
    androidenv.emulateApp {
      name = "emulate-${kitchensink.name}";
      app = kitchensink;
      platformVersion = "16";
      useGoogleAPIs = true;
      package = "com.appcelerator.kitchensink";
      activity = ".KitchensinkActivity";
    }


You need to install the APK on the emulator. You can do this with the adb command line tool that is included in the Android SDK.

    adb -e install -r yourapp.apk

Once you've done that you should be able to run the app.

The -e and -r flags might not be necessary. They just specify that you are using an emulator (if you also have a device connected) and that you want to replace the app if it already exists.


e.g.

    adb -e install -r android-result/android-app-debug.apk 
    # error: no emulators found

    time nix-build emulate.nix
    # building path(s) ‘/nix/store/fm8ik5krpgh5qz31vqc5pz3dciy0zhs6-android-app’
    # building path(s) ‘/nix/store/c1dckq54dnq1h6yq1gk623rh14cs62c0-emulate-example-cards-frontend’
    # /nix/store/c1dckq54dnq1h6yq1gk623rh14cs62c0-emulate-example-cards-frontend
    # real	1m6.303s

    /nix/store/c1dckq54dnq1h6yq1gk623rh14cs62c0-emulate-example-cards-frontend/bin/run-test-emulator 
    # Looking for a free TCP port in range 5554-5584
    # We have a free TCP port: 5554
    # Error: Target id is not valid. Use 'android list targets' to get the target ids.

    android list targets
    # Available Android targets:
    # ----------
    # id: 1 or "android-26"
    #      Name: Android 8.0.0
    #      Type: Platform
    #      API level: 26
    #      Revision: 2
    #      Skins: HVGA, QVGA, WQVGA400, WQVGA432, WSVGA, WVGA800 (default), WVGA854, WXGA720, WXGA800,     # WXGA800-7in
    #  Tag/ABIs : no ABIs.


    $ cat android-result/bin/deploy
    /nix/store/srgawlc7ksmvsibzimnr3rdyf84vqayw-android-sdk-25.2.5/bin/adb install -r     "/nix/store/2lmi97hzssx10w067jiza4pzzi7dh6xw-android-app/android-app-debug.apk"

no device connected

    # android-result/bin/deploy
    # error: no devices/emulators found
    # adb: error: failed to get feature set: no devices/emulators found

android device plugged in, with "USB debugging connected"

    android-result/bin/deploy
    # error: insufficient permissions for device: verify udev rules.

https://developer.android.com/studio/run/device.html

my user is already in the right group

    id -Gn 
    # sboo adm cdrom sudo dip plugdev lpadmin sambashare

dont' need

    # sudo usermod -aG plugdev $LOGNAME


========================================
Manually Install App On Android Phone

    du -h android-result/android-app-debug.apk | cut -f1
    # 4.4M

    nautilus android-result
    # popup a file browser GUI

On the phone, under the USB options drop down, select transfer files.
On my computer, a filesystem browser popped up, and I just dragged the APK into it.

Then on my phone, using an app like File Manager, I just double-clicked on the file. 
So I clicked `install`, it installed, I clicked `open`, and it worked!

These `Activity`-killing actions preserved the application state: rotating the phone between landscape and portrait modes; pressing the right button (to list all open apps); and "alt-tabbing"; pressing the home button (to leave the app, then return).  
Pressing the left button (the back button) reset the state. 


========================================
jsaddle-warp

conditional compilation via -fjsaddle-warp

`jsaddle-warp` versus `webkitgtk` 

CPP via -DJSADDLE_WARP



========================================
dante, new-repl, nix-shell

nix-shell -A shells.ghc 'cabal new-repl cards-frontend'


========================================
MagicCards.Info Syntax

https://magiccards.info/syntax.html


Complex Queries
====================

any Simple Query can be combined with other Simple Queries via Logical Operators to make... Complex Queries! 

e.g. "a or b", "a not b", "a -b", "a (b or c)", "a or (b c)", etc.


Logical Operators
====================

_ and _
_ _ (i.e. whitespace)

_ or _

not _
- _

( _ )


Simple Queries
====================

Name
--------------------
Birds of Paradise
"Birds of Paradise"
!Anger (Match the full name)

Rules Text (Oracle)
--------------------
o:Flying
o:"First strike"
o:{T} o:"add one mana of any color"
(new) o:"whenever ~ deals combat damage"

Types (Oracle)
--------------------
t:angel
t:"legendary angel"
t:basic
t:"arcane instant"

Colors
--------------------
c:w (Any card that is white)
c:wu (Any card that is white or blue)
c:wum (Any card that is white or blue, and multicolored)
c!w (Cards that are only white)
c!wu (Cards that are only white or blue, or both)
c!wum (Cards that are only white and blue, and multicolored)
c!wubrgm (Cards that are all five colors)
c:m (Any multicolored card)
c:l or c:c (Lands and colorless cards)

Color Identity
--------------------
ci:wu (Any card that is white or blue, but does not contain any black, red or green mana symbols)
Color Indicator:
(new) in:wu (Any card that is white or blue according to the color indicator.)

Mana Cost
--------------------
mana=3G (Spells that cost exactly 3G, or split cards that can be cast with 3G)
mana>=2WW (Spells that cost at least two white and two colorless mana)
mana<GGGGGG (Spells that can be cast with strictly less than six green mana)
mana>=2RR mana<=6RR (Spells that cost two red mana and between two and six colorless mana)
(new) mana>={2/R}
(new) mana>={W/U}
(new) mana>={UP}

Power, Toughness, Converted Mana Cost
--------------------
pow>=8
tou<pow (All combinations are possible)
cmc=7
(new) cmc>=*

Rarity
--------------------
r:mythic

Format
--------------------
f:standard (or block, extended, vintage, classic, legacy, modern, commander)
banned:extended (or legal, restricted)

Artist
--------------------
a:"rk post"

Edition
--------------------
e:al/en (Uses the abbreviations that are listed on the sitemap)
(new) e:al,be (Cards that appear in Alpha or Beta)
(new) e:al+be (Cards that appear in Alpha and Beta)
(new) e:al,be -e:al+be (Cards that appear in Alpha or Beta but not in both editions)
(new) year<=1995 (Cards printed in 1995 and earlier)

Is
--------------------
is:split, is:flip
is:vanilla (Creatures with no card text)
is:old, is:new, is:future (Old/new/future card face)
is:timeshifted
is:funny, not:funny (Unglued/Unhinged/Happy Holidays Promos)
is:promo (Promotional cards)
is:promo is:old (Promotional cards with the original card face)
(new) is:permanent, is:spell
(new) is:black-bordered, is:white-bordered, is:silver-bordered
(new) has:foil

Language
--------------------
l:de, l:it, l:jp (Uses the abbreviations that are listed on the sitemap)


========================================
Example Queries


e.g. Saboteurs

o:"whenever ~" ((o:"deals damage to a" or o:"deals combat damage to a") (o:opponent or o:player)) or o:"attacks and isn't blocked")

==>

Academy Raider rummages 
Bearer Of Overwhelming Truths investigates 
Blazing Specter has haste 
Blizzard Specter either discards or bounces
Cabal Executioner edicts and has morph
Charnelhoard Wurm regrows and has trample 
Centaur Rootcaster fetches a basic (but has no evasion) 
Cephalid Constable bounces X 
Daxos of Meletis draws-from-their-deck 
Dimir Cutpurse both draws and forces discard (i.e. both a specter and ophidian) 
Doomsday Specter coerces
Dragonlord Ojutai anticipates and has flying 
Drana,Liberator of Malakir is a mass-slith 
Emperor’s Vanguard explores 
Empyreal Voyager produces that much energy 
Eternal of Harsh Truths draws and has afflict 
Fiend of the Shadows steals a card from their hand and has flying 
Ghastlord of Fugue coerces and is unblockable 
Gishath, Sun's Avatar cheats all dinosaurs from your top X cards and has trample
Grim Flayer mill-scries and has trample
Hapatra places a counter, and makes a snake when you place counters; indirection
Longtusk Cub produces energy and spends energy to grow; indirection 
Looter il-kor: loots, has shadow 
Mana Skimmer: freeze their land, flying 


is:saboteur ???


i.e.

(then o:"whenever ~"
      (or (then (or o:"deals damage to a"
                    o:"deals combat damage to a"))
          (or o:opponent
              o:player))
     o:"attacks and isn't blocked"))


a.k.a. with regex:


a.k.a. with BNF:

o:"whenever ~ (deals [combat] damage to (an opponent | a player) | attacks and isn't blocked)"
where "[_]", "(_)", and "_ | _" are bnf syntax and not oracle text

-- pretty-printed
o:"whenever ~ ( deals [combat] damage to ( an opponent 
                                         | a player
                                         ) 
              | attacks and isn't blocked
              )"

-- distributed / flattened
o:"whenever ~ deals        damage to an opponent
o:"whenever ~ deals combat damage to an opponent
o:"whenever ~ deals        damage to a  player
o:"whenever ~ deals combat damage to a  player
--
o:"whenever ~ attacks and isn't blocked



========================================
REFLEX/GHCJS DOM



mainWidget $ do
 (eClick, wButton) <- button' "CLICK"
 return eClick 


-- | html for a button
hButton :: MonadWidget t m => Text -> m ( t ())
hButton t = do
  (e, _) <- element "button" def $ text t
  return e

-- | all events for a button
runWidget :: (forall x. Widget x ()) -> IO ()
runWidget w = mainWidget w

example_button = runWidget $ do 
 esButton <- hButton "CLICK"
 return esButton

esButton <- runWidget $ do 
 esButton <- hButton "CLICK"
 return esButton

>>> import Reflex 
>>> import Reflex.Dom 
>>> :set -XOverloadedStrings
>>> -- `ghci` monad is `IO`, no `MonadWidget` 
>>> (e, _) <- element "button" def $ text "(click)"
>>> :t domEvent Click e 


esButton <- mainWidget $ do 
 (esButton,_) <- element "button" def (text "CLICK")
 return esButton



========================================
mtgjson

https://mtgjson.com/sets.html

https://mtgjson.com/json/version.json


========================================
unicode-show

-- | Show the input, and then replace Haskell character literals
-- with the character it represents, for any Unicode printable characters except backslash, single and double quotation marks.
-- If something fails, fallback to standard 'show'.

ushow :: Show a => a -> String
ushow = ushowWith
 (\c -> isPrint c && not (isHaskellEscaped c))

isHaskellEscaped c
  = c == '\\' 
 || c == '\''
 || c == '\"'

> isPrint '—'
True



========================================
