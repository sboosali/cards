name:                cards-common
version:             0.0.0
cabal-version:       >=1.24

----------------------------------------

build-type:          Simple 
category:            Data 
synopsis:            TODO 
description:         
 .
 TODO
 . 
 see the source of "Cards.Common.Example" for an example.
 .
 transitive dependencies:
 .
 <<cards-common.png>>

homepage:            http://github.com/sboosali/cards#readme
bug-reports:         http://github.com/sboosali/cards/issues
author:              Spiros Boosalis
maintainer:          samboosalis@gmail.com
copyright:           2018 Spiros Boosalis
license:             BSD3
license-file:        LICENSE
stability:           provisional
tested-with:
  GHC   == 8.0.2
  GHCJS == 8.0.2

----------------------------------------
  
-- PVP
-- https://wiki.haskell.org/Package_versioning_policy
-- "A.B is known as the major version number, and C the minor version number."

extra-source-files:
  README.md
  stack.yaml
  .travis.yml
  HLint.hs

  includes/RIXSets-y.txt

----------------------------------------

data-files:
  data/json/AllSets-x.json
  data/json/RealSets-x.json
  data/json/RealSets-y.json
  data/json/SetList.json
  data/json/version.json

----------------------------------------

source-repository head
  type:     git
  location: https://github.com/sboosali/cards

----------------------------------------

flag use-template-haskell
  default: True
  description: Use template haskell to generate lenses and to safely invert functions. 
  manual: True
  
-- -- make the `template` test suite dump its template-haskell splices
-- flag dump-splices
--   default: False
--   manual: True

----------------------------------------

library
 hs-source-dirs:      sources

 if flag(use-template-haskell)
    cpp-options: -DUSE_TEMPLATE_HASKELL
    other-extensions: TemplateHaskell
    -- build-depends:
    --   template-haskell >= 2.9 && < 2.13
 
 ghc-options:
  -- Optimization...
  -flate-dmd-anal
   -- for `foldl`'s

  -- Warnings...
  -Wall
  -Wcompat

  -- disable
  -Wno-unticked-promoted-constructors

  -- enable
  -Wincomplete-uni-patterns
  -Wincomplete-record-updates
  -Widentities
  -Wmissing-methods

  -- raise a warning into an error
  --TODO -Werror=missing-fields

  -- use `typed-holes`, not `undefined`, during development
  -Wtyped-holes

  -fdefer-typed-holes
  -- with -XGeneralizedNewtypeDeriving: "Couldn't match representation of type ‘proxy ...’ with that of ‘proxy ...’"
  -- > This only happens when -fdefer-type-errors is on. This is a duplicate of #12104, which has been fixed in GHC 8.2.1.

 default-language:   Haskell2010
 default-extensions: NoImplicitPrelude
                     PackageImports AutoDeriveTypeable DeriveDataTypeable DeriveGeneric
                     DeriveFunctor DeriveFoldable DeriveTraversable
                     LambdaCase EmptyCase TypeOperators PostfixOperators
                     ViewPatterns BangPatterns KindSignatures
                     NamedFieldPuns RecordWildCards TupleSections
                     MultiWayIf DoAndIfThenElse EmptyDataDecls
                     MultiParamTypeClasses FlexibleContexts FlexibleInstances
                     TypeFamilies FunctionalDependencies
                     ScopedTypeVariables StandaloneDeriving

 exposed-modules:

                 -- the repl loads only the first module
                 REPL_Cards_Common

                 MTGJSON
                 MTGJSON.Types
                 MTGJSON.Kinds
                 MTGJSON.Constants

                 MTGJSON.Main 

                 MTGJSON.Known
                 MTGJSON.Known.Types
                 MTGJSON.Known.Newtypes
                 MTGJSON.Known.Lens 

                 MTGJSON.Printer
                 MTGJSON.Printer.Finite

                 MTGJSON.Parser                 

                 MTGJSON.Validate

                 MTGJSON.Core

                 MTGJSON.Version
                 MTGJSON.SetList
                 MTGJSON.AllSets               
                 MTGJSON.AllSets.Schema
                 MTGJSON.AllSets.Types
                 MTGJSON.AllSets.Core
                 MTGJSON.AllSets.Lens 
                 MTGJSON.AllSets.Fold 
                 
                 MTGJSON.Aeson
                 MTGJSON.Example
                 MTGJSON.Paths 
                 MTGJSON.Macros
                 MTGJSON.Extra                 
                 
                 Cards.Common
                 Cards.Common.Types
                 Cards.Common.Core		
                 Cards.Common.Example   

                 Cards.Syntax.Operators

                 Cards.Query
                 Cards.Query.Types

                 Cards.Syntax.MagicCardsInfo
                 Cards.Syntax.MagicCardsInfo.Types
                 Cards.Syntax.MagicCardsInfo.Static     
                 Cards.Syntax.MagicCardsInfo.Known 
                 Cards.Syntax.MagicCardsInfo.Parser
                 Cards.Syntax.MagicCardsInfo.Validator 
                 Cards.Syntax.MagicCardsInfo.Compiler
                 Cards.Syntax.MagicCardsInfo.Printer
            
                 Tokenize
                 Mixfix

                 Control.Foldl.Summary
 
 other-modules:

                 Cards.Syntax.Extra

                 Cards.Common.Extra
--                 Cards.Common.UnicodeShow
                 
                 Paths_cards_common

 autogen-modules:
                 Paths_cards_common

 build-depends:
               base >=4.7 && <5

-- mine 
             , spiros
             , enumerate          >=0.2.3
             , enumerate-function >=0.0.1

             , template-haskell

-- (extended) standard library 
             , deepseq
             , hashable
             , containers
             , unordered-containers
             , text 
             , bytestring
             , transformers
             , mtl

-- ekmett 
             , exceptions
             , lens
             , profunctors

-- parsing
             , parsers  >= 0.12
             , parsec
             , trifecta >= 1.7
                        -- 2.0
             , Earley >= 0.12
             , frisby >=0.2
--             , megaparsec

-- other packages 
             , aeson
             , scientific
             , binary
             , file-embed
             , time
             , thyme
             , validation >= 1
             , foldl >= 1.3

----------------------------------------

executable example-cards-common
 if !impl(ghc)
    buildable: False
    -- calls `readFile`

 hs-source-dirs:      executables
 main-is:             Main.hs

 default-language:    Haskell2010
 ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N

 build-depends:
    base
  , cards-common

----------------------------------------

-- -- $ stack test unit
-- test-suite unit
--  hs-source-dirs:      tests
--  main-is:             UnitTests.hs
--  type:                exitcode-stdio-1.0

--  default-language:    Haskell2010
--  ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N

--  other-modules:
--   Cards.Common.Test

--  build-depends:
--     base
--   , cards-common 
--   , tasty
  

-- -- $ stack test properties 
-- test-suite properties 
--  hs-source-dirs:      tests
--  main-is:             PropertyTests.hs
--  type:                exitcode-stdio-1.0

--  default-language:    Haskell2010
--  ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N

--  other-modules:
--   Cards.Common.Property 

--  build-depends:
--     base
--   , cards-common
--   , QuickCheck 
--   , tasty
--   , tasty-quickcheck


test-suite doctest
 hs-source-dirs:      tests
 main-is:             DocTests.hs

 type:                exitcode-stdio-1.0
 default-language:    Haskell2010
 ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N

-- ghcjsi doesn't work, or `doctest` needs the GHC API more tightly?
 if impl(ghcjs)
    buildable: False
 else
    build-depends:
       base
     , cards-common
     , doctest


-- -- $ stack test templates 
-- -- Template Haskell 
-- -- Verify that Template Haskell expansion works
-- test-suite templates
--   hs-source-dirs:      tests
--   main-is:             TemplateHaskellTests.hs

--   type:             exitcode-stdio-1.0
--   default-language: Haskell2010
--   ghc-options:      -Wall -threaded

--   if flag(dump-splices)
--     ghc-options: -ddump-splices

--   build-depends:
--       base
--     , cards-common
--     , lens

-- ----------------------------------------

-- -- $ stack bench 
-- benchmark everything 
--  hs-source-dirs:      benchmarks
--  main-is:             Bench.hs
--  type:                exitcode-stdio-1.0

--  default-language: Haskell2010
--  ghc-options:      -Wall -O2 -threaded -fdicts-cheap -funbox-strict-fields
 
--  build-depends:
--     base
--   , cards-common
--   , criterion
--   , deepseq

----------------------------------------

-- originally generated with this command:  
-- 
-- $ stack new cards-common https://raw.githubusercontent.com/sboosali/configuration/master/stack/templates/spirosboosalis.hsfiles -p "module:Cards.Common" -p "filepath:Cards/Common"
-- 
-- given this configuration in `~/.stack/config.yaml`: 
-- 
-- templates:
--   params:
--     author-email:    samboosalis@gmail.com 
--     author-name:     Spiros Boosalis 
--     github-username: sboosali 
--     copyright:       2018 Spiros Boosalis  
--     synopsis:        TODO 
